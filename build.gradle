buildscript {
	ext {
		kotlinVersion = '1.3.31'
		springBootVersion = '2.1.3.RELEASE'
		springSecurityVersion = '5.2.0.M4'
		protoBufVersion = '3.6.1'
		protoBufGradleVersion = '0.8.8'
		mapStructVersion = '1.3.0.Final'
		apacheCommonsVersion = '3.8.1'
		servletApi = '3.1.0'
		mysqlConnectorJavaVersion = '8.0.15'
		mysqlSocketFactoryVersion = '1.0.12'
        flywayVersion = '5.2.4'
	}
	repositories {
		mavenCentral()
		maven { url 'https://repo.spring.io/snapshot' }
		maven { url 'https://repo.spring.io/milestone' }
        // for Flyway plugin
        maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
		// ProtocolBuffers
		classpath("com.google.protobuf:protobuf-gradle-plugin:${protoBufGradleVersion}")
        // for Flyway plugin
        classpath "gradle.plugin.com.boxfuse.client:gradle-plugin-publishing:${flywayVersion}"
	}
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'kotlin-kapt'
//ProtocolBuffers
apply plugin: 'com.google.protobuf'
// for Flyway plugin
apply plugin: "org.flywaydb.flyway"

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'mysql:mysql-connector-java'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // DOMA
    implementation("org.seasar.doma.boot:doma-spring-boot-starter:latest.release")
    implementation("org.seasar.doma:doma:latest.release")
    kapt("org.seasar.doma:doma:latest.release")
    // ProtocolBuffers
    implementation("com.google.protobuf:protobuf-java:${protoBufVersion}")
    // SpringFox
    implementation("io.springfox:springfox-swagger2:latest.release")
    implementation("io.springfox:springfox-swagger-ui:latest.release")
    implementation("com.hubspot.jackson:jackson-datatype-protobuf:latest.release")
    compile("mysql:mysql-connector-java:${mysqlConnectorJavaVersion}")
}

// for Flyway plugin(Local Environment)
flyway {
    url = 'jdbc:mysql://localhost:3318?useSSL=false'
    user = 'root'
    password = 'root_password'
    schemas = ['user']
    baselineVersion = '0.0.1'
    locations = ['filesystem:src/main/resources/db/migration/common', 'filesystem:src/main/resources/db/migration/local']
}

kapt {
    	arguments {
        		arg("doma.resources.dir", compileKotlin.destinationDir)
        	}
    }

// DOMAで使用するSQLファイル等の読み込み
task copyDomaResources(type: Sync)  {
    	from sourceSets.main.resources.srcDirs
    	into compileKotlin.destinationDir
    	include 'doma.compile.config'
    	include 'META-INF/**/*.sql'
    	include 'META-INF/**/*.script'
    }

compileKotlin {
    dependsOn copyDomaResources
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '1.8'
    }
}

compileTestKotlin {
    dependsOn copyDomaResources
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '1.8'
    }
}